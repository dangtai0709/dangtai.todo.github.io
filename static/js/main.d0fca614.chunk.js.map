{"version":3,"sources":["axios.js","actions/TaskList.js","component/TaskList/List/index.js","component/TaskList/index.js","App.js","serviceWorker.js","reducers/TaskList.js","reducers/index.js","store.js","index.js"],"names":["axios","interceptors","request","use","config","error","Promise","reject","response","instance","create","baseURL","timeout","getTasks","dispatch","get","then","status","console","log","statusText","type","value","data","Object","keys","map","key","id","catch","e","List","props","state","edit","name","task","handleChange","bind","event","target","this","setState","prevState","checkbox","updateData","handleEdit","onSubmit","removeData","className","placeholder","onChange","onClick","handleSubmit","defaultChecked","handleRemove","Component","connect","params","delete","put","updateTasks","TaskList","addData","fetchData","tasks","i","post","App","Boolean","window","location","hostname","match","initialState","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d0fca614.chunk.js","sourcesContent":["import axios from 'axios';\n\n// Add a request interceptor\naxios.interceptors.request.use((config) => {\n    // Do something before request is sent\n    return config;\n  }, (error) => {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\n// Add a response interceptor\naxios.interceptors.response.use((response) => {\n    // Do something with response data\n    return response;\n  }, (error) => {\n    // Do something with response error\n    return Promise.reject(error);\n  });\nconst instance = axios.create({\n    baseURL:'https://react-test-fdbc1.firebaseio.com/',\n    timeout:10000,\n})\n\nexport default instance;","import axios from \"../axios\";\nexport const ADD_TASK = \"ADD_TASK\";\nexport const REMOVE_TASK = \"REMOVE_TASK\";\nexport const UPDATE_TASK = \"UPDATE_TASK\";\nexport const GET_TASKS = \"GET_TASKS\";\n\nexport const itemsFetchData = (value) => {\n  value = value\n    ? Object.keys(value).map((key) => {\n        return { ...value[key], id: key };\n      })\n    : [];\n  return {\n    type: GET_TASKS,\n    value,\n  };\n};\nexport function getTasks() {\n  return (dispatch) => {\n    axios\n      .get(\"/tasklist.json\")\n      .then((response) => {\n        if (response.status !== 200) {\n          console.log(response.statusText);\n        }\n        return response;\n      })\n      .then((response) => dispatch(itemsFetchData(response.data)))\n      .catch((e) => console.log(e));\n  };\n}\nexport function addTasks(params) {\n  return (dispatch) => {\n    axios\n      .post(\"/tasklist.json\", params)\n      .then((response) => {\n        if (response.status !== 200) {\n          console.log(response.statusText);\n        }\n        return response;\n      })\n      .then((response) => dispatch(getTasks()))\n      .catch((e) => console.log(e));\n  };\n}\nexport function removeTasks(params) {\n  return (dispatch) => {\n    axios\n      .delete(`/tasklist/${params}.json`)\n      .then((response) => {\n        if (response.status !== 200) {\n          console.log(response.statusText);\n        }\n        return response;\n      })\n      .then((response) => dispatch(getTasks()))\n      .catch((e) => console.log(e));\n  };\n}\nexport function updateTasks(id, params) {\n  return (dispatch) => {\n    axios\n      .put(`/tasklist/${id}.json`, params)\n      .then((response) => {\n        if (response.status !== 200) {\n          console.log(response.statusText);\n        }\n        return response;\n      })\n      .then((response) => dispatch(getTasks()))\n      .catch((e) => console.log(e));\n  };\n}\n","import React, { Component } from \"react\";\nimport { removeTasks, updateTasks } from \"../../../actions/TaskList\";\nimport { connect } from \"react-redux\";\nclass List extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      edit: false,\n      name: props.task.name,\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  }\n  handleEdit(value) {\n    this.setState((prevState) => ({\n      ...prevState,\n      edit: value,\n    }));\n  }\n  handleSubmit(checkbox = false) {\n    if (!this.state.name) return;\n    let data = { ...this.props.task, ...this.state };\n    if (checkbox) {\n      data.status = data.status ? \"\" : \"completed\";\n    }\n    delete data.edit;\n    delete data.id;\n    this.props.updateData(this.props.task.id, data);\n    this.handleEdit(false);\n    this.props.onSubmit();\n  }\n  handleRemove() {\n    this.props.removeData(this.props.task.id);\n    this.props.onSubmit();\n  }\n  render() {\n    return (\n      <li className={this.props.task.status === \"completed\" ? \"completed\" : \"\"}>\n        <div className=\"form-check\">\n          {this.state.edit ? (\n            <div>\n              <input\n                className=\"form-control todo-list-input\"\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Default input\"\n                value={this.state.name}\n                onChange={this.handleChange}\n              ></input>\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary mt-1\"\n                onClick={() => this.handleSubmit()}\n              >\n                Submit\n              </button>\n            </div>\n          ) : (\n            <label className=\"form-check-label\">\n              <input\n                className=\"checkbox\"\n                type=\"checkbox\"\n                defaultChecked={this.props.task.status === \"completed\"}\n                onClick={() => this.handleSubmit(true)}\n              />\n              {this.props.task.name}\n              <i className=\"input-helper\"></i>\n            </label>\n          )}\n        </div>\n        <i\n          className=\"remove mdi mdi-close-circle-outline\"\n          onClick={() => this.handleRemove()}\n        ></i>\n        {!this.state.edit && (\n          <i\n            className=\"fa fa-edit cursor-pointer m-2\"\n            onClick={() => this.handleEdit(true)}\n          ></i>\n        )}\n      </li>\n    );\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    removeData: (data) => dispatch(removeTasks(data)),\n    updateData: (id, data) => dispatch(updateTasks(id, data)),\n  };\n};\nexport default connect(null, mapDispatchToProps)(List);\n","import \"./TaskList.css\";\nimport React, { Component} from \"react\";\nimport List from \"./List\";\nimport {getTasks,addTasks} from '../../actions/TaskList'\nimport { connect } from 'react-redux';\nclass TaskList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name:'',\n      status:''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  }\n  handleSubmit(){\n    if(!this.state.name) return;\n    this.props.addData(this.state)\n    this.setState({\n      name:'',\n      status:''\n    });\n}\ncomponentDidMount() {\n  this.props.fetchData();\n}\n  render() {\n    return (\n      <div className=\"page-content page-container m-5\" id=\"page-content\">\n        <div className=\"row d-flex justify-content-center\">\n          <div className=\"col-lg-12\">\n            <div className=\"card px-3\">\n              <div className=\"card-body\">\n                <h4 className=\"card-title\">Awesome Todo list</h4>\n                <div className=\"add-items d-flex\">\n                  <input\n                    type=\"text\"\n                    className=\"form-control todo-list-input\"\n                    placeholder=\"What do you need to do today?\"\n                    name=\"name\"\n                    value={this.state.name}\n                    onChange={this.handleChange}\n                  />\n                  <button className=\"add btn btn-primary font-weight-bold todo-list-add-btn\"onClick={()=>this.handleSubmit()}>\n                    Add\n                  </button>\n                </div>\n                <div className=\"list-wrapper\">\n                  <ul className=\"d-flex flex-column-reverse todo-list\">\n                    {this.props.tasks.map((e, i) => (\n                      <List key={i} task={e} onSubmit={()=> this.props.fetchData()}/>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n      tasks: state.TaskList.tasks\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n      fetchData: () => dispatch(getTasks()),\n      addData: (data) => dispatch(addTasks(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList);\n\n","import React from 'react';\n// import './App.css';\nimport TaskList from './component/TaskList/index.js';\nfunction App() {\n  return (\n      <TaskList/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { GET_TASKS } from \"../actions/TaskList\";\nconst initialState = {\n  tasks: [],\n};\n\nconst TaskList = (state = initialState, { type, value }) => {\n  switch (type) {\n    case GET_TASKS:\n      return {\n        ...state,\n        tasks: value,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default TaskList;\n","\nimport { combineReducers } from 'redux';\nimport TaskList from './TaskList';\n\nexport default combineReducers({\n    TaskList\n});","\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './store'\nReactDOM.render(\n  <Provider store={store}>\n  <App/>\n</Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}